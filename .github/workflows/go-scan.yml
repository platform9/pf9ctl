name: Go Security Scans

on:
  push:
    branches: ["private/harsh/sast-scan"]
  pull_request:
    branches: ["private/harsh/sast-scan"]

jobs:
  govulncheck:
    name: Go Vulnerability Check (govulncheck)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - name: Install govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run govulncheck
        run: govulncheck -show verbose ./...

  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

  gosec:
    name: Static Code Analysis (gosec)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - name: Install gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run gosec
        run: gosec ./...

  gitleaks:
    name: Secret Scan (gitleaks)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git -v

  # trivy:
  #   name: (Trivy) Dependency Vulnerability Scan
  #   runs-on: ubuntu-latest
  #   outputs:
  #     trivy-high-found: ${{ steps.check.outputs.trivy-high-found }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install Trivy
  #       run: |
  #         curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

  #     - name: Run Trivy and Save Report
  #       run: |
  #         trivy fs --scanners vuln --vuln-type library --format json -o trivy-report.json .

  #     - name: Upload Trivy Report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: trivy-report
  #         path: trivy-report.json

  #     - name: Show Trivy Report in Logs
  #       run: cat trivy-report.json

  #     - name: Check for High/Critical Vulnerabilities
  #       id: check
  #       run: |
  #         count=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' trivy-report.json)
  #         echo "trivy-high-found=$([[ $count -gt 0 ]] && echo true || echo false)" >> $GITHUB_OUTPUT

  dependencies-scan:
    name: 🔐 Secrets & Dependency Scan
    runs-on: ubuntu-latest
    outputs:
      trivy-high-found: ${{ steps.check.outputs.trivy-high-found }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Run Gitleaks
      #   uses: gitleaks/gitleaks-action@v2
      #   with:
      #     args: detect --no-git -v

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Trivy and Save Report
        run: |
          trivy fs --scanners vuln --vuln-type library --format json -o trivy-report.json .

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Show Trivy Report in Logs
        run: cat trivy-report.json

      - name: Check for High/Critical Vulnerabilities
        id: check
        run: |
          count=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' trivy-report.json)
          echo "trivy-high-found=$([[ $count -gt 0 ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Install Checkov (optional)
        run: pip install checkov

      - name: Run Checkov (IaC scan)
        run: checkov -d . || true


  auto-pr:
    name: Create Pull Request if High/Critical Vulnerabilities Found
    needs: [dependencies-scan]
    if: needs.dependencies-scan.outputs.trivy-high-found == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Trivy Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: tmp

      - name: Generate PR Body with High/Critical Trivy Results
        run: |
          echo "# 🚨 Trivy Vulnerability Report (High/Critical)" > tmp/pr-body.md
          jq -r '
            .Results[]
            | select(.Vulnerabilities != null)
            | .Target as $target
            | .Vulnerabilities[]
            | select(.Severity == "HIGH" or .Severity == "CRITICAL")
            | "* Target: \($target)
                • Package: \(.PkgName)
                • Severity: \(.Severity)
                • Title: \(.Title)
                • Description: \(.Description // "N/A")
                • Installed Version: \(.InstalledVersion)
                • Fixed Version: \(.FixedVersion // "N/A")
                • CWE: \(.CweIDs | join(", ") // "N/A")
                • CVE: \(.VulnerabilityID)
                • References: \(.PrimaryURL // "N/A")
              "
          ' tmp/trivy-report.json >> tmp/pr-body.md || echo "❌ No critical/high vulnerabilities found in report." >> tmp/pr-body.md
      
      
      - name: Add Trivy Alert Log (Optional)
        run: |
          jq -r '
            .Results[]
            | select(.Vulnerabilities != null)
            | .Vulnerabilities[]
            | select(.Severity == "HIGH" or .Severity == "CRITICAL")
            | "* \(.VulnerabilityID) - \(.PkgName) (\(.Severity))"
          ' tmp/trivy-report.json > .security-alert.log || true
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add -f .security-alert.log || true
          git commit -m "chore: trivy security alert log" || true

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "chore: high/critical vulnerabilities detected 🚨"
          title: "chore: auto PR for Trivy scan (high/critical vulnerabilities)"
          body-path: tmp/pr-body.md
          branch: "auto/high-critical-security-scan"
          base: "master"
          # delete-branch: true

